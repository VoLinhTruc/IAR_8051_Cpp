///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              31/Mar/2018  15:48:42
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\Bico\Desktop\IAR 8051 C++\LowLevelLibrary\src\Generic.c
//    Command line       =  
//        -f C:\Users\Bico\AppData\Local\Temp\EW95C5.tmp
//        ("C:\Users\Bico\Desktop\IAR 8051 C++\LowLevelLibrary\src\Generic.c"
//        -lC "C:\Users\Bico\Desktop\IAR 8051 C++\LowLevelLibrary\Debug\List"
//        -lA "C:\Users\Bico\Desktop\IAR 8051 C++\LowLevelLibrary\Debug\List"
//        -o "C:\Users\Bico\Desktop\IAR 8051 C++\LowLevelLibrary\Debug\Obj" -e
//        --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data --nr_virtual_regs 8 --dlib_config "C:\Program
//        Files (x86)\IAR Systems\Embedded Workbench
//        8.0\8051\LIB\DLIB\dl8051Normal.h" -I "C:\Users\Bico\Desktop\IAR 8051
//        C++\LowLevelLibrary\..\LowLevelLibrary\inc\" -I
//        "C:\Users\Bico\Desktop\IAR 8051 C++\LowLevelLibrary\..\ArduinoJson\"
//        -I "C:\Users\Bico\Desktop\IAR 8051
//        C++\LowLevelLibrary\..\ArduinoJson\ArduinoJson\" -I
//        "C:\Users\Bico\Desktop\IAR 8051
//        C++\LowLevelLibrary\..\ArduinoJson\ArduinoJson\Data\" -I
//        "C:\Users\Bico\Desktop\IAR 8051
//        C++\LowLevelLibrary\..\ArduinoJson\ArduinoJson\Deserialization\" -I
//        "C:\Users\Bico\Desktop\IAR 8051
//        C++\LowLevelLibrary\..\ArduinoJson\ArduinoJson\Polyfills\" -I
//        "C:\Users\Bico\Desktop\IAR 8051
//        C++\LowLevelLibrary\..\ArduinoJson\ArduinoJson\Serialization\" -I
//        "C:\Users\Bico\Desktop\IAR 8051
//        C++\LowLevelLibrary\..\ArduinoJson\ArduinoJson\StringTraits\" -I
//        "C:\Users\Bico\Desktop\IAR 8051
//        C++\LowLevelLibrary\..\ArduinoJson\ArduinoJson\TypeTraits\" -Ol
//        --eec++ --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
//        --no_cross_call)
//    Locale             =  Vietnamese_Vietnam.1258
//    List file          =  
//        C:\Users\Bico\Desktop\IAR 8051
//        C++\LowLevelLibrary\Debug\List\Generic.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME Generic

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?L_ADD_X
        EXTERN ?XLOAD_R2345
        EXTERN __INIT_XDATA_I

        PUBLIC ??delay_5us
        FUNCTION ??delay_5us,080203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC `??delay_5us::?relay`
        FUNCTION `??delay_5us::?relay`,0203H
        PUBLIC ??delay_ms
        FUNCTION ??delay_ms,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC `??delay_ms::?relay`
        FUNCTION `??delay_ms::?relay`,0203H
        PUBWEAK __Constant_c8
        PUBWEAK __Constant_ffffffff
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        

`??delay_5us::?relay` SYMBOL "?relay", ??delay_5us

`??delay_ms::?relay` SYMBOL "?relay", ??delay_ms

// C:\Users\Bico\Desktop\IAR 8051 C++\LowLevelLibrary\src\Generic.c
//    1 #include "Generic.h"
//    2 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//    3 void delay_5us(unsigned long microSecs)
??delay_5us:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ??delay_5us
        CODE
//    4 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        SJMP      ??delay_5us_1
//    5   while(microSecs--)
//    6   {
//    7     asm("NOP"); asm("NOP"); asm("NOP"); asm("NOP");
??delay_5us_2:
        NOP
        NOP
        NOP
        NOP
//    8     asm("NOP"); asm("NOP"); asm("NOP"); asm("NOP");
        NOP
        NOP
        NOP
        NOP
//    9     asm("NOP");
        NOP
//   10   }
??delay_5us_1:
        MOV       ?V4,?V0
        MOV       ?V5,?V1
        MOV       ?V6,?V2
        MOV       ?V7,?V3
        MOV       ?V0,?V4
        MOV       ?V1,?V5
        MOV       ?V2,?V6
        MOV       ?V3,?V7
        MOV       DPTR,#__Constant_ffffffff
        MOV       R0,#?V0
        LCALL     ?L_ADD_X
        MOV       A,?V4
        ORL       A,?V5
        ORL       A,?V6
        ORL       A,?V7
        JNZ       ??delay_5us_2
//   11 }
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//   12 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   13 void delay_ms(unsigned long milliSecs)
??delay_ms:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ??delay_ms
        CODE
//   14 {
        FUNCALL ??delay_ms, ??delay_5us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        SJMP      ??delay_ms_1
//   15   while(milliSecs--)
//   16   {
//   17     delay_5us(200);
??delay_ms_2:
        ; Setup parameters for call to function delay_5us(unsigned long)
        MOV       DPTR,#__Constant_c8
        LCALL     ?XLOAD_R2345
        LCALL     `??delay_5us::?relay`; Banked call to: delay_5us(unsigned long)
//   18   }
??delay_ms_1:
        MOV       ?V4,?V0
        MOV       ?V5,?V1
        MOV       ?V6,?V2
        MOV       ?V7,?V3
        MOV       ?V0,?V4
        MOV       ?V1,?V5
        MOV       ?V2,?V6
        MOV       ?V3,?V7
        MOV       DPTR,#__Constant_ffffffff
        MOV       R0,#?V0
        LCALL     ?L_ADD_X
        MOV       A,?V4
        ORL       A,?V5
        ORL       A,?V6
        ORL       A,?V7
        JNZ       ??delay_ms_2
//   19 }
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA32
__Constant_ffffffff:
        DS 4
        REQUIRE `?<Initializer for __Constant_ffffffff>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_ffffffff>`:
        DATA32
        DD 4294967295

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA32
__Constant_c8:
        DS 4
        REQUIRE `?<Initializer for __Constant_c8>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_c8>`:
        DATA32
        DD 200

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??delay_5us::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ??delay_5us

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??delay_ms::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ??delay_ms

        END
// 
// 142 bytes in segment BANKED_CODE
//  12 bytes in segment BANK_RELAYS
//   8 bytes in segment XDATA_I
//   8 bytes in segment XDATA_ID
// 
//  12 bytes of CODE     memory (+ 8 bytes shared)
// 142 bytes of HUGECODE memory
//   0 bytes of XDATA    memory (+ 8 bytes shared)
//
//Errors: none
//Warnings: none
